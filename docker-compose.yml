version: "3.8"
services:
    traefik:
        container_name: traefik
        image: traefik:v2.3
        restart: unless-stopped
        ports:
            - 80:80
            - 443:443
        expose:
            - "8080"
            - "8082"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./traefik:/etc/traefik
        networks:
            - web
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.api.rule=Host(`2.sushii.xyz`) && PathPrefix(`/traefik`)"
            - "traefik.http.middlewares.traefik.stripprefix.prefixes=/traefik"
            - "traefik.http.routers.api.service=api@internal"
            - "traefik.http.routers.api.middlewares=auth@file"
            - "traefik.http.routers.api.entrypoints=secure"
            - "traefik.http.routers.api.tls.certresolver=acme"
    grafana:
        image: grafana/grafana:7.1.5
        container_name: grafana
        expose:
            - "3000"
        volumes:
            - ~/docker/grafana:/var/lib/grafana
        networks:
            - web
        labels:
            - "traefik.http.routers.grafana.rule=Host(`2.sushii.xyz`) && PathPrefix(`/grafana`)"
            - "traefik.http.middlewares.grafana.stripprefix.prefixes=/grafana"
            - "traefik.http.routers.grafana.entrypoints=secure"
            - "traefik.http.routers.grafana.tls.certresolver=acme"
    prometheus:
        image: prom/prometheus:v2.20.1
        container_name: prometheus
        expose:
            - "9090"
        volumes:
            - ~/docker/prometheus:/etc/prometheus
        networks:
            - sushii_net
            - web
        labels:
            - "traefik.http.routers.prometheus.rule=Host(`2.sushii.xyz`) && PathPrefix(`/prometheus`)"
            - "traefik.http.middlewares.prometheus.stripprefix.prefixes=/prometheus"
            - "traefik.http.routers.prometheus.entrypoints=secure"
            - "traefik.http.routers.prometheus.tls.certresolver=acme"
            - "traefik.http.routers.prometheus.middlewares=auth@file"
    postgres:
        image: postgres:12
        container_name: postgres
        restart: unless-stopped
        env_file:
            - .env
        volumes:
            - ~/docker/postgres:/var/lib/postgresql/data
        networks:
            - sushii_net
    sushii:
        image: docker.pkg.github.com/drklee3/sushii-2/sushii-2:latest
        container_name: sushii
        restart: unless-stopped
        depends_on:
            - postgres
        expose:
            - "9888"
        logging:
            driver: json-file
            options:
                max-size: "10m"
                max-file: "3"
                mode: non-blocking
                max-buffer-size: 4m
        env_file:
            - .env
        networks:
            - sushii_net
networks:
    web:
        external: false
    sushii_net:
        external: false
